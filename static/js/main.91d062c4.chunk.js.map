{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoItem","props","onTaskChange","event","input","target","value","setState","editValue","state","editing","item","title","textInput","React","createRef","document","addEventListener","id","onEnterTask","this","current","focus","onTaskToggle","completed","onDeleteItem","className","classNames","type","checked","onChange","onDoubleClick","onClick","ref","onKeyDown","key","PureComponent","TodoList","items","filter","listOfItems","map","Component","propsTypes","PropTypes","arrayOf","shape","number","isRequired","string","bool","func","TodoFilter","onFilteredTodos","href","selected","App","onSubmitNewTodo","preventDefault","inputValue","prevState","nextId","todos","length","todo","toggleAll","dataChange","onChangeInput","onToggleAll","onClearCompleted","tagName","innerHTML","bind","localTodos","localStorage","getItem","JSON","parse","setItem","stringify","left","onSubmit","placeholder","htmlFor","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.91d062c4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoItem.css';\n\nclass TodoItem extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editing: false,\n      editValue: this.props.item.title,\n    };\n    this.textInput = React.createRef();\n  }\n\n  onTaskChange = (event) => {\n    const input = event.target.value;\n\n    this.setState({\n      editValue: input,\n    });\n  };\n\n  componentDidMount() {\n    document.addEventListener('click', (event) => {\n      const { editing, editValue } = this.state;\n      const {\n        item: { title, id },\n        onEnterTask,\n      } = this.props;\n\n      if (editing && event.target.value !== title) {\n        this.setState({ editing: false });\n        onEnterTask(editValue, id);\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    this.textInput.current.focus();\n  }\n\n  render() {\n    const { editing, editValue } = this.state;\n    const {\n      onTaskToggle,\n      item: { id, title, completed },\n      onDeleteItem,\n      onEnterTask,\n    } = this.props;\n\n    return (\n      <li\n        className={classNames({\n          completed: completed,\n          editing: editing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n            checked={completed}\n            onChange={(event) => onTaskToggle(event)}\n          />\n          <label\n            onDoubleClick={() => {\n              this.setState({ editing: true });\n            }}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDeleteItem(id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={editValue}\n          ref={this.textInput}\n          onChange={(event) => {\n            this.onTaskChange(event);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              this.setState({ editing: false });\n              onEnterTask(editValue, id);\n            } else if (event.key === 'Escape') {\n              this.setState({\n                editing: false,\n                editValue: title,\n              });\n            }\n          }}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onTaskToggle: PropTypes.func.isRequired,\n  onDeleteItem: PropTypes.func.isRequired,\n  onEnterTask: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\nimport './TodoList.css';\n\nclass TodoList extends React.Component {\n  render() {\n    const {\n      items,\n      filter,\n      onTaskToggle,\n      onDeleteItem,\n      onEnterTask,\n    } = this.props;\n    const listOfItems = items\n      .filter((item) => {\n        if (filter === 'Active') {\n          return item.completed === false;\n        } else if (filter === 'Completed') {\n          return item.completed === true;\n        }\n        return true;\n      })\n      .map((item) => (\n        <TodoItem\n          key={item.id}\n          item={item}\n          onTaskToggle={onTaskToggle}\n          onDeleteItem={onDeleteItem}\n          onEnterTask={onEnterTask}\n        />\n      ));\n\n    return <ul className=\"todo-list\">{listOfItems}</ul>;\n  }\n}\n\nTodoList.propsTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  onTaskToggle: PropTypes.func.isRequired,\n  onDeleteItem: PropTypes.func.isRequired,\n  onEnterTask: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoFilter.css';\n\nclass TodoFilter extends React.Component {\n  render() {\n    const { onFilteredTodos, filter } = this.props;\n    return (\n      <ul className=\"filters\" onClick={(event) => onFilteredTodos(event)}>\n        <li>\n          <a href=\"#/\" className={classNames({ selected: filter === 'All' })}>\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({ selected: filter === 'Active' })}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({ selected: filter === 'Completed' })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nTodoFilter.propTypes = {\n  onFilteredTodos: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default TodoFilter;\n","import React from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport TodoFilter from './components/TodoFilter/TodoFilter';\nimport classNames from 'classnames';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmitNewTodo = this.onSubmitNewTodo.bind(this);\n    this.onTaskToggle = this.onTaskToggle.bind(this);\n    this.onToggleAll = this.onToggleAll.bind(this);\n\n    this.state = {\n      todos: [],\n      filter: 'All',\n      toggleAll: true,\n      inputValue: '',\n      nextId: 0,\n      dataChange: false,\n    };\n  }\n\n  componentDidMount() {\n    const localTodos = localStorage.getItem('todos');\n    const nextId = localStorage.getItem('nextId');\n    if (localTodos) {\n      this.setState({\n        todos: JSON.parse(localTodos),\n      });\n    }\n\n    if (nextId) {\n      this.setState({ nextId: +nextId });\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.dataChange) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n      localStorage.setItem('nextId', this.state.nextId);\n\n      this.setState({\n        dataChange: false,\n      });\n    }\n  }\n\n  onSubmitNewTodo = (event) => {\n    event.preventDefault();\n    const inputValue = this.state.inputValue;\n    if (inputValue !== '') {\n      this.setState((prevState) => {\n        let id = prevState.nextId;\n        if (prevState.nextId === 0) {\n          id = prevState.todos.length;\n        }\n\n        const todo = {\n          id: id,\n          title: inputValue,\n          completed: false,\n        };\n\n        return {\n          todos: [...prevState.todos, todo],\n          toggleAll: true,\n          inputValue: '',\n          nextId: id + 1,\n          dataChange: true,\n        };\n      });\n    }\n  };\n\n  onChangeInput = (event) => {\n    const inputValue = event.target.value;\n    this.setState({\n      inputValue,\n    });\n  };\n\n  onTaskToggle = (event) => {\n    const id = event.target.id;\n\n    this.setState((prevState) => {\n      return {\n        todos: prevState.todos.map((todo) => {\n          if (`todo-${todo.id}` !== id) {\n            return todo;\n          }\n          return { ...todo, completed: !todo.completed };\n        }),\n        toggleAll: true,\n        dataChange: true,\n      };\n    });\n  };\n\n  onToggleAll = () => {\n    this.setState((prevState) => {\n      return {\n        todos: prevState.todos.map((todo) => {\n          if (todo.completed === prevState.toggleAll) {\n            return todo;\n          }\n          return { ...todo, completed: prevState.toggleAll };\n        }),\n        toggleAll: !prevState.toggleAll,\n        dataChange: true,\n      };\n    });\n  };\n\n  onDeleteItem = (id) => {\n    this.setState((prevState) => {\n      return {\n        todos: prevState.todos.filter((todo) => todo.id !== id),\n        dataChange: true,\n      };\n    });\n  };\n\n  onClearCompleted = () => {\n    this.setState((prevState) => {\n      return {\n        todos: prevState.todos.filter((todo) => todo.completed === false),\n        toggleAll: true,\n        dataChange: true,\n      };\n    });\n  };\n\n  onFilteredTodos = (event) => {\n    const target = event.target;\n    if (target.tagName === 'A') {\n      const value = target.innerHTML;\n      this.setState((prevState) => {\n        if (prevState !== value) {\n          return {\n            filter: value,\n          };\n        }\n      });\n    }\n  };\n\n  onEnterTask = (editValue, id) => {\n    this.setState((prevState) => {\n      return {\n        todos: prevState.todos.map((todo) => {\n          if (id !== todo.id) {\n            return todo;\n          }\n\n          return { ...todo, title: editValue };\n        }),\n        dataChange: true,\n      };\n    });\n  };\n\n  render() {\n    const { todos, inputValue, filter } = this.state;\n    const left = todos.filter((todo) => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <form onSubmit={(event) => this.onSubmitNewTodo(event)}>\n            <h1>todos</h1>\n\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={inputValue}\n              onChange={(event) => this.onChangeInput(event)}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => this.onToggleAll()}\n            checked={!this.state.toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            onTaskToggle={this.onTaskToggle}\n            onDeleteItem={this.onDeleteItem}\n            onEnterTask={this.onEnterTask}\n            items={todos}\n            filter={filter}\n          />\n        </section>\n\n        <footer\n          className={classNames('footer', {\n            'footer-empty': todos.length === 0,\n          })}\n        >\n          <span className=\"todo-count\">\n            {left}\n            {` item${left !== 1 ? 's' : ''} left`}\n          </span>\n\n          <TodoFilter onFilteredTodos={this.onFilteredTodos} filter={filter} />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => this.onClearCompleted()}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}